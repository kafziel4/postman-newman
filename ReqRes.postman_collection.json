{
	"info": {
		"_postman_id": "2e2aa2af-8b62-480a-96ee-f1d8bdd10e01",
		"name": "ReqRes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20746734"
	},
	"item": [
		{
			"name": "Get a list of users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Body - page should be 2', () => {\r",
							"  pm.expect(jsonData.page).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test('Body - per_page should be 6', () => {\r",
							"  pm.expect(jsonData.per_page).to.eql(6);\r",
							"});\r",
							"\r",
							"pm.test('Body - total should be 12', () => {\r",
							"  pm.expect(jsonData.total).to.eql(12);\r",
							"});\r",
							"\r",
							"pm.test('Body - total_pages should be 2', () => {\r",
							"  pm.expect(jsonData.total_pages).to.eql(2);\r",
							"});\r",
							"\r",
							"const users = [\r",
							"  {\r",
							"    id: 7,\r",
							"    email: 'michael.lawson@reqres.in',\r",
							"    first_name: 'Michael',\r",
							"    last_name: 'Lawson',\r",
							"    avatar: 'https://reqres.in/img/faces/7-image.jpg',\r",
							"  },\r",
							"  {\r",
							"    id: 8,\r",
							"    email: 'lindsay.ferguson@reqres.in',\r",
							"    first_name: 'Lindsay',\r",
							"    last_name: 'Ferguson',\r",
							"    avatar: 'https://reqres.in/img/faces/8-image.jpg',\r",
							"  },\r",
							"  {\r",
							"    id: 9,\r",
							"    email: 'tobias.funke@reqres.in',\r",
							"    first_name: 'Tobias',\r",
							"    last_name: 'Funke',\r",
							"    avatar: 'https://reqres.in/img/faces/9-image.jpg',\r",
							"  },\r",
							"  {\r",
							"    id: 10,\r",
							"    email: 'byron.fields@reqres.in',\r",
							"    first_name: 'Byron',\r",
							"    last_name: 'Fields',\r",
							"    avatar: 'https://reqres.in/img/faces/10-image.jpg',\r",
							"  },\r",
							"  {\r",
							"    id: 11,\r",
							"    email: 'george.edwards@reqres.in',\r",
							"    first_name: 'George',\r",
							"    last_name: 'Edwards',\r",
							"    avatar: 'https://reqres.in/img/faces/11-image.jpg',\r",
							"  },\r",
							"  {\r",
							"    id: 12,\r",
							"    email: 'rachel.howell@reqres.in',\r",
							"    first_name: 'Rachel',\r",
							"    last_name: 'Howell',\r",
							"    avatar: 'https://reqres.in/img/faces/12-image.jpg',\r",
							"  },\r",
							"];\r",
							"\r",
							"pm.test('Body - data length should be 6', () => {\r",
							"  pm.expect(jsonData.data).to.have.lengthOf(6);\r",
							"});\r",
							"\r",
							"for (let i = 0; i < users.length; i += 1) {\r",
							"  pm.test(`Body - data for ${users[i].first_name} should be correct`, () => {\r",
							"    pm.expect(jsonData.data[i]).to.deep.eql(users[i]);\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"const bodyData = jsonData.data;\r",
							"\r",
							"pm.test('Body data - id should be 2', () => {\r",
							"  pm.expect(bodyData.id).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test('Body data - email should be janet.weaver@reqres.in', () => {\r",
							"  pm.expect(bodyData.email).to.eql('janet.weaver@reqres.in');\r",
							"});\r",
							"\r",
							"pm.test('Body data - first name should be Janet', () => {\r",
							"  pm.expect(bodyData.first_name).to.eql('Janet');\r",
							"});\r",
							"\r",
							"pm.test('Body data - last name should be Weaver', () => {\r",
							"  pm.expect(bodyData.last_name).to.eql('Weaver');\r",
							"});\r",
							"\r",
							"pm.test('Body data - avatar should be https://reqres.in/img/faces/2-image.jpg', () => {\r",
							"  pm.expect(bodyData.avatar).to.eql('https://reqres.in/img/faces/2-image.jpg');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single user not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 404', () => {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('Body should be an empty object', () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.be.an('object').that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/23",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a list of colors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Body - page should be 1', () => {\r",
							"  pm.expect(jsonData.page).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test('Body - per_page should be 6', () => {\r",
							"  pm.expect(jsonData.per_page).to.eql(6);\r",
							"});\r",
							"\r",
							"pm.test('Body - total should be 12', () => {\r",
							"  pm.expect(jsonData.total).to.eql(12);\r",
							"});\r",
							"\r",
							"pm.test('Body - total_pages should be 2', () => {\r",
							"  pm.expect(jsonData.total_pages).to.eql(2);\r",
							"});\r",
							"\r",
							"const colors = [\r",
							"  {\r",
							"    id: 1,\r",
							"    name: 'cerulean',\r",
							"    year: 2000,\r",
							"    color: '#98B2D1',\r",
							"    pantone_value: '15-4020',\r",
							"  },\r",
							"  {\r",
							"    id: 2,\r",
							"    name: 'fuchsia rose',\r",
							"    year: 2001,\r",
							"    color: '#C74375',\r",
							"    pantone_value: '17-2031',\r",
							"  },\r",
							"  {\r",
							"    id: 3,\r",
							"    name: 'true red',\r",
							"    year: 2002,\r",
							"    color: '#BF1932',\r",
							"    pantone_value: '19-1664',\r",
							"  },\r",
							"  {\r",
							"    id: 4,\r",
							"    name: 'aqua sky',\r",
							"    year: 2003,\r",
							"    color: '#7BC4C4',\r",
							"    pantone_value: '14-4811',\r",
							"  },\r",
							"  {\r",
							"    id: 5,\r",
							"    name: 'tigerlily',\r",
							"    year: 2004,\r",
							"    color: '#E2583E',\r",
							"    pantone_value: '17-1456',\r",
							"  },\r",
							"  {\r",
							"    id: 6,\r",
							"    name: 'blue turquoise',\r",
							"    year: 2005,\r",
							"    color: '#53B0AE',\r",
							"    pantone_value: '15-5217',\r",
							"  },\r",
							"];\r",
							"\r",
							"pm.test('Body - data length should be 6', () => {\r",
							"  pm.expect(jsonData.data).to.have.lengthOf(6);\r",
							"});\r",
							"\r",
							"for (let i = 0; i < colors.length; i += 1) {\r",
							"  pm.test(`Body - data for ${colors[i].name} should be correct`, () => {\r",
							"    pm.expect(jsonData.data[i]).to.deep.eql(colors[i]);\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/colors",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"colors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single color",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"const bodyData = jsonData.data;\r",
							"\r",
							"pm.test('Body data - id should be 2', () => {\r",
							"  pm.expect(bodyData.id).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test('Body data - name should be fuchsia rose', () => {\r",
							"  pm.expect(bodyData.name).to.eql('fuchsia rose');\r",
							"});\r",
							"\r",
							"pm.test('Body data - year name should be 2001', () => {\r",
							"  pm.expect(bodyData.year).to.eql(2001);\r",
							"});\r",
							"\r",
							"pm.test('Body data - color should be #C74375', () => {\r",
							"  pm.expect(bodyData.color).to.eql('#C74375');\r",
							"});\r",
							"\r",
							"pm.test('Body data - pantone value should be 17-2031', () => {\r",
							"  pm.expect(bodyData.pantone_value).to.eql('17-2031');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/colors/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"colors",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single color not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 404', () => {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('Body should be an empty object', () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.be.an('object').that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/colors/23",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"colors",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 201', () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Body - name should be morpheus', () => {\r",
							"  pm.expect(jsonData.name).to.eql('morpheus');\r",
							"});\r",
							"\r",
							"pm.test('Body - job should be leader', () => {\r",
							"  pm.expect(jsonData.job).to.eql('leader');\r",
							"});\r",
							"\r",
							"pm.test('Body - id should be a string between 1 and 3 digits', () => {\r",
							"  pm.expect(jsonData.id).to.be.a('string').and.match(/\\d{1,3}/);\r",
							"});\r",
							"\r",
							"pm.test('Body - created at should be a string and match UTC format', () => {\r",
							"  pm.expect(jsonData.createdAt).to.be.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Body - name should be morpheus', () => {\r",
							"  pm.expect(jsonData.name).to.eql('morpheus');\r",
							"});\r",
							"\r",
							"pm.test('Body - job should be zion resident', () => {\r",
							"  pm.expect(jsonData.job).to.eql('zion resident');\r",
							"});\r",
							"\r",
							"pm.test('Body - updated at should be a string and match UTC format', () => {\r",
							"  pm.expect(jsonData.updatedAt).to.be.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Body - name should be morpheus', () => {\r",
							"  pm.expect(jsonData.name).to.eql('morpheus');\r",
							"});\r",
							"\r",
							"pm.test('Body - job should be zion resident', () => {\r",
							"  pm.expect(jsonData.job).to.eql('zion resident');\r",
							"});\r",
							"\r",
							"pm.test('Body - updated at should be a string and match UTC format', () => {\r",
							"  pm.expect(jsonData.updatedAt).to.be.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 204', () => {\r",
							"  pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test('Content-Length should be 0', () => {\r",
							"    pm.response.to.have.header('Content-Length', '0');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register successfully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Body - id should be 4', () => {\r",
							"  pm.expect(jsonData.id).to.eql(4);\r",
							"});\r",
							"\r",
							"pm.test('Body - token should be QpwL5tke4Pnpja7X4', () => {\r",
							"  pm.expect(jsonData.token).to.eql('QpwL5tke4Pnpja7X4');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register unsuccessfully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 400', () => {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('Body - error should be Missing password', () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.error).to.eql('Missing password');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login successfully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('Body - token should be QpwL5tke4Pnpja7X4', () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.token).to.eql('QpwL5tke4Pnpja7X4');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login unsuccessfully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 400', () => {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should be application/json', () => {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('Body - error should be Missing password', () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.error).to.eql('Missing password');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	]
}